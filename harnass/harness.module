<?php
// $Id$

/**
 * Implements the hook_perm()
 */
function harness_perm() {
  return array(
    ''
  );
}

/**
 * Implements the hook_menu()
 * 
 */
function harness_menu() {

  $items = array();

  return $items;
}

function harness_node_info() {
  return array(
    'harness' => array(
      'name' => t('Harness'), 
      'module' => 'harness', 
      'description' => t('This provides Harness Support for Selenium tests.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => TRUE,
      'body_label' => t('Description'),
      'min_word_count' => 0,
      'locked' => FALSE )
  );
  
}

function sauce_labels_browsers() {
  
  $url = 'http://saucelabs.com/rest/v1/info/browsers';
  $data = drupal_http_request($url);
  $json = json_decode ($data->data);

  $output = sauce_browser_table($json);
  
  $output = 'The Table' . $output;
  return $output;
}

function sauce_browser_table( $json ) {
  
  foreach ($json as $idx => $data) {
    $oss[$data->os][$data->long_name][] = $data;
    $browsers[$data->long_name][$data->os][] = $data;
  }
  
  $headers = array('');
  foreach ($oss as $os => $osdata) {
    $headers[] = $os;
  }
  
  $rows = array();
  foreach ($browsers as $browser => $browserarray) {
    $row = array();
    $row[] = array('data' => $browser);
    dsm($browserarray);
    foreach ($oss as $os => $osarray) {
      if (in_array($os, $browserarray)) {
        $row[] = array('data' => 'Found');
      }
      else {
        $row[] = array('data' => '--');
      }
    }
    
    $rows[] = array( 'data' => $row );
    
    //foreach ($)
  }
  
  $table = theme('table', $headers, $rows);
  
  return $table;
  //dsm($browsers);
  //dsm($oss);
}

function harness_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield', 
    '#title' => check_plain($type->title_label), 
    '#required' => TRUE,
  );

  $form['body'] = array(
    '#type' => 'textarea', 
    '#title' => check_plain($type->body_label), 
    '#rows' => 20, 
    '#required' => TRUE,
  );
  
  $form['table'] = array(
    '#value' => sauce_labels_browsers(), 
  );
 
  return $form;
}

function harness_setup_fields() {

  $content_type = 'harness';
  module_load_include('inc', 'text', 'text_widget');
  module_load_include('inc', 'content', 'includes/content.crud');
  
  $fields = array();
  $fields[] = array (
    'type_name' => 'harness',
    'label' => 'Tests',
    'field_name' => 'field_testcase',
    'type' => 'nodereference',
    'widget_type' => 'nodereference_select',
    'change' => 'Change basic information',
    'weight' => '32',
    'autocomplete_match' => 'contains',
    'size' => 60,
    'description' => '',
    'default_value' => 
    array (
      0 => 
      array (
        'nid' => '',
      ),
    ),
    'default_value_php' => '',
    'default_value_widget' => NULL,
    'required' => 0,
    'multiple' => '1',
    'referenceable_types' => 
    array (
      'testcase' => 'testcase',
      'harness' => 0,
      'page' => 0,
      'story' => 0,
    ),
    'op' => 'Save field settings',
    'module' => 'nodereference',
    'widget_module' => 'nodereference',
    'columns' => 
    array (
      'nid' => 
      array (
        'type' => 'int',
        'unsigned' => true,
        'not null' => false,
        'index' => true,
      ),
    ),
    'display_settings' => 
    array (
      'label' => 
      array (
        'format' => 'above',
        'exclude' => 0,
      ),
      'teaser' => 
      array (
        'format' => 'default',
        'exclude' => 0,
      ),
      'full' => 
      array (
        'format' => 'default',
        'exclude' => 0,
      ),
      4 => 
      array (
        'format' => 'default',
        'exclude' => 0,
      ),
    ),
  );

  foreach ($fields as $idx => $field) {
    $options = array(
	  'field_name' => $field['field_name'], 
	  'type_name'  => $content_type
	);

    $instances = content_field_instance_read($options);

    if (count($instances)==0) {
	  content_field_instance_create($field);
	  drupal_set_message('Adding the ' . $field['field_name'] . ' field.');
	}
	else {
	  drupal_set_message('Unable to add the ' . $field['field_name'] . ' field.');
	}
  }

  return 'Done';
}

function harness_views_default_views() {

$view = new view;
$view->name = 'harnesses';
$view->description = '';
$view->tag = '';
$view->view_php = '';
$view->base_table = 'node';
$view->is_cacheable = FALSE;
$view->api_version = 2;
$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
$handler = $view->new_display('default', 'Defaults', 'default');
$handler->override_option('fields', array(
  'title' => array(
    'label' => 'Title',
    'alter' => array(
      'alter_text' => 0,
      'text' => '',
      'make_link' => 0,
      'path' => '',
      'link_class' => '',
      'alt' => '',
      'prefix' => '',
      'suffix' => '',
      'target' => '',
      'help' => '',
      'trim' => 0,
      'max_length' => '',
      'word_boundary' => 1,
      'ellipsis' => 1,
      'html' => 0,
      'strip_tags' => 0,
    ),
    'empty' => '',
    'hide_empty' => 0,
    'empty_zero' => 0,
    'link_to_node' => 1,
    'exclude' => 0,
    'id' => 'title',
    'table' => 'node',
    'field' => 'title',
    'relationship' => 'none',
  ),
));
$handler->override_option('filters', array(
  'type' => array(
    'operator' => 'in',
    'value' => array(
      'harness' => 'harness',
    ),
    'group' => '0',
    'exposed' => FALSE,
    'expose' => array(
      'operator' => FALSE,
      'label' => '',
    ),
    'id' => 'type',
    'table' => 'node',
    'field' => 'type',
    'relationship' => 'none',
  ),
));
$handler->override_option('access', array(
  'type' => 'none',
));
$handler->override_option('cache', array(
  'type' => 'none',
));
$handler->override_option('title', 'Harnesses');
$handler->override_option('style_plugin', 'table');
$handler->override_option('style_options', array(
  'grouping' => '',
  'override' => 1,
  'sticky' => 0,
  'order' => 'asc',
  'columns' => array(
    'title' => 'title',
  ),
  'info' => array(
    'title' => array(
      'sortable' => 0,
      'separator' => '',
    ),
  ),
  'default' => '-1',
));
$handler = $view->new_display('page', 'Page', 'page_1');
$handler->override_option('path', 'harnesses');
$handler->override_option('menu', array(
  'type' => 'normal',
  'title' => 'Harnesses',
  'description' => '',
  'weight' => '0',
  'name' => 'primary-links',
));
$handler->override_option('tab_options', array(
  'type' => 'none',
  'title' => '',
  'description' => '',
  'weight' => 0,
  'name' => 'navigation',
));

  // Add view to list of views to provide.
  $views[$view->name] = $view;

  // At the end, return array of default views.
  return $views;
}